// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(OtrContext))]
    [Migration("20250218030526_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entities.Beatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("Ar")
                        .HasColumnType("double precision");

                    b.Property<int?>("BeatmapsetId")
                        .HasColumnType("integer");

                    b.Property<double>("Bpm")
                        .HasColumnType("double precision");

                    b.Property<int>("CountCircle")
                        .HasColumnType("integer");

                    b.Property<int>("CountSlider")
                        .HasColumnType("integer");

                    b.Property<int>("CountSpinner")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Cs")
                        .HasColumnType("double precision");

                    b.Property<string>("DiffName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("DrainLength")
                        .HasColumnType("integer");

                    b.Property<bool>("HasData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<double>("Hp")
                        .HasColumnType("double precision");

                    b.Property<int?>("MaxCombo")
                        .HasColumnType("integer");

                    b.Property<double>("Od")
                        .HasColumnType("double precision");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint");

                    b.Property<int>("RankedStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer");

                    b.Property<double>("Sr")
                        .HasColumnType("double precision");

                    b.Property<long>("TotalLength")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapsetId");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.ToTable("Beatmaps");
                });

            modelBuilder.Entity("Database.Entities.BeatmapAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("BeatmapId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Mods")
                        .HasColumnType("integer");

                    b.Property<double>("Sr")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId", "Mods")
                        .IsUnique();

                    b.ToTable("BeatmapAttributes");
                });

            modelBuilder.Entity("Database.Entities.Beatmapset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RankedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RankedStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.ToTable("Beatmapsets");
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeatmapId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int>("Mods")
                        .HasColumnType("integer");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("RejectionReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer");

                    b.Property<int>("ScoringType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("WarningFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId");

                    b.HasIndex("MatchId");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.HasIndex("StartTime");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Database.Entities.GameAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("GameAdminNotes");
                });

            modelBuilder.Entity("Database.Entities.GameAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("GameAudits");
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Count100")
                        .HasColumnType("integer");

                    b.Property<int>("Count300")
                        .HasColumnType("integer");

                    b.Property<int>("Count50")
                        .HasColumnType("integer");

                    b.Property<int>("CountGeki")
                        .HasColumnType("integer");

                    b.Property<int>("CountKatu")
                        .HasColumnType("integer");

                    b.Property<int>("CountMiss")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("integer");

                    b.Property<int>("Mods")
                        .HasColumnType("integer");

                    b.Property<bool>("Pass")
                        .HasColumnType("boolean");

                    b.Property<bool>("Perfect")
                        .HasColumnType("boolean");

                    b.Property<int>("Placement")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RejectionReason")
                        .HasColumnType("integer");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("Team")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId", "GameId")
                        .IsUnique();

                    b.ToTable("GameScores");
                });

            modelBuilder.Entity("Database.Entities.GameScoreAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("GameScoreAdminNotes");
                });

            modelBuilder.Entity("Database.Entities.GameScoreAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("GameScoreAudits");
                });

            modelBuilder.Entity("Database.Entities.GameWinRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("LoserRoster")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("LoserScore")
                        .HasColumnType("integer");

                    b.Property<int>("LoserTeam")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("WinnerRoster")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("WinnerScore")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.HasIndex("WinnerRoster");

                    b.ToTable("GameWinRecords");
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasDefaultValue("");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("RejectionReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("WarningFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.HasIndex("SubmittedByUserId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Database.Entities.MatchAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("MatchAdminNotes");
                });

            modelBuilder.Entity("Database.Entities.MatchAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("MatchAudits");
                });

            modelBuilder.Entity("Database.Entities.MatchWinRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.PrimitiveCollection<int[]>("LoserRoster")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("LoserScore")
                        .HasColumnType("integer");

                    b.Property<int>("LoserTeam")
                        .HasColumnType("integer");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("WinnerRoster")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("WinnerScore")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LoserRoster");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("WinnerRoster");

                    b.ToTable("MatchWinRecords");
                });

            modelBuilder.Entity("Database.Entities.OAuthClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("RateLimitOverride")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OAuthClients");
                });

            modelBuilder.Entity("Database.Entities.OAuthClientAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("OAuthClientAdminNotes");
                });

            modelBuilder.Entity("Database.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OsuLastFetch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("OsuTrackLastFetch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("Ruleset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Database.Entities.PlayerAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("PlayerAdminNotes");
                });

            modelBuilder.Entity("Database.Entities.PlayerHighestRanks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryRank")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CountryRankDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GlobalRankDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryRank")
                        .IsDescending();

                    b.HasIndex("GlobalRank")
                        .IsDescending();

                    b.HasIndex("PlayerId", "Ruleset")
                        .IsUnique();

                    b.ToTable("PlayerHighestRanks");
                });

            modelBuilder.Entity("Database.Entities.PlayerMatchStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageAccuracy")
                        .HasColumnType("double precision");

                    b.Property<double>("AverageMisses")
                        .HasColumnType("double precision");

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("double precision");

                    b.Property<double>("AverageScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer");

                    b.Property<double>("MatchCost")
                        .HasColumnType("double precision");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("OpponentIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("TeammateIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<bool>("Won")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId", "MatchId")
                        .IsUnique();

                    b.HasIndex("PlayerId", "Won");

                    b.ToTable("PlayerMatchStats");
                });

            modelBuilder.Entity("Database.Entities.PlayerOsuRulesetData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EarliestGlobalRank")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EarliestGlobalRankDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<double>("Pp")
                        .HasColumnType("double precision");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "Ruleset")
                        .IsUnique();

                    b.ToTable("PlayerOsuRulesetData");
                });

            modelBuilder.Entity("Database.Entities.PlayerTournamentStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageAccuracy")
                        .HasColumnType("double precision");

                    b.Property<double>("AverageMatchCost")
                        .HasColumnType("double precision");

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("double precision");

                    b.Property<double>("AverageRatingDelta")
                        .HasColumnType("double precision");

                    b.Property<int>("AverageScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer");

                    b.Property<int>("MatchesLost")
                        .HasColumnType("integer");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("integer");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("TeammateIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("PlayerId", "TournamentId")
                        .IsUnique();

                    b.ToTable("PlayerTournamentStats");
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryRank")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("integer");

                    b.Property<double>("Percentile")
                        .HasColumnType("double precision");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer");

                    b.Property<double>("Volatility")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Rating")
                        .IsDescending();

                    b.HasIndex("Ruleset");

                    b.HasIndex("PlayerId", "Ruleset")
                        .IsUnique();

                    b.ToTable("PlayerRatings");
                });

            modelBuilder.Entity("Database.Entities.Processor.RatingAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdjustmentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerRatingId")
                        .HasColumnType("integer");

                    b.Property<double>("RatingAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("RatingBefore")
                        .HasColumnType("double precision");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("VolatilityAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("VolatilityBefore")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerRatingId");

                    b.HasIndex("PlayerId", "MatchId")
                        .IsUnique();

                    b.HasIndex("PlayerId", "Timestamp");

                    b.ToTable("RatingAdjustments");
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<string>("ForumUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("LobbySize")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("RankRangeLowerBound")
                        .HasColumnType("integer");

                    b.Property<int>("RejectionReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Ruleset");

                    b.HasIndex("SubmittedByUserId");

                    b.HasIndex("VerifiedByUserId");

                    b.HasIndex("Name", "Abbreviation")
                        .IsUnique();

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Database.Entities.TournamentAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("TournamentAdminNotes");
                });

            modelBuilder.Entity("Database.Entities.TournamentAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("TournamentAudits");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Scopes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValue(new string[0]);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Database.Entities.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DefaultRuleset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("DefaultRulesetIsControlled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("JoinBeatmapCreators", b =>
                {
                    b.Property<int>("CreatedBeatmapsId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorsId")
                        .HasColumnType("integer");

                    b.HasKey("CreatedBeatmapsId", "CreatorsId");

                    b.HasIndex("CreatorsId");

                    b.ToTable("JoinBeatmapCreators");
                });

            modelBuilder.Entity("JoinPooledBeatmaps", b =>
                {
                    b.Property<int>("PooledBeatmapsId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentsPooledInId")
                        .HasColumnType("integer");

                    b.HasKey("PooledBeatmapsId", "TournamentsPooledInId");

                    b.HasIndex("TournamentsPooledInId");

                    b.ToTable("JoinPooledBeatmaps");
                });

            modelBuilder.Entity("Database.Entities.Beatmap", b =>
                {
                    b.HasOne("Database.Entities.Beatmapset", "Beatmapset")
                        .WithMany("Beatmaps")
                        .HasForeignKey("BeatmapsetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Beatmapset");
                });

            modelBuilder.Entity("Database.Entities.BeatmapAttributes", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", "Beatmap")
                        .WithMany("Attributes")
                        .HasForeignKey("BeatmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beatmap");
                });

            modelBuilder.Entity("Database.Entities.Beatmapset", b =>
                {
                    b.HasOne("Database.Entities.Player", "Creator")
                        .WithMany("CreatedBeatmapsets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", "Beatmap")
                        .WithMany("Games")
                        .HasForeignKey("BeatmapId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("Games")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beatmap");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Database.Entities.GameAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("GameAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Game", "Game")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Database.Entities.GameAudit", b =>
                {
                    b.HasOne("Database.Entities.Game", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.HasOne("Database.Entities.Game", "Game")
                        .WithMany("Scores")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.GameScoreAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("GameScoreAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.GameScore", "Score")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Database.Entities.GameScoreAudit", b =>
                {
                    b.HasOne("Database.Entities.GameScore", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Database.Entities.GameWinRecord", b =>
                {
                    b.HasOne("Database.Entities.Game", "Game")
                        .WithOne("WinRecord")
                        .HasForeignKey("Database.Entities.GameWinRecord", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.HasOne("Database.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedMatches")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SubmittedByUser");

                    b.Navigation("Tournament");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Database.Entities.MatchAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("MatchAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Database.Entities.MatchAudit", b =>
                {
                    b.HasOne("Database.Entities.Match", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Database.Entities.MatchWinRecord", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithOne("WinRecord")
                        .HasForeignKey("Database.Entities.MatchWinRecord", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Database.Entities.OAuthClient", b =>
                {
                    b.HasOne("Database.Entities.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.OAuthClientAdminNote", b =>
                {
                    b.HasOne("Database.Entities.OAuthClient", "OAuthClient")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OAuthClient");
                });

            modelBuilder.Entity("Database.Entities.PlayerAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("PlayerAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerHighestRanks", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("HighestRanks")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerMatchStats", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("MatchStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerOsuRulesetData", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("RulesetData")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerTournamentStats", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("TournamentStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Tournament", "Tournament")
                        .WithMany("PlayerTournamentStats")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("Ratings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.Processor.RatingAdjustment", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("PlayerRatingAdjustments")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("RatingAdjustments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Processor.PlayerRating", "PlayerRating")
                        .WithMany("Adjustments")
                        .HasForeignKey("PlayerRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("PlayerRating");
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.HasOne("Database.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedTournaments")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Entities.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SubmittedByUser");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Database.Entities.TournamentAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("TournamentAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Tournament", "Tournament")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Database.Entities.TournamentAudit", b =>
                {
                    b.HasOne("Database.Entities.Tournament", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithOne("User")
                        .HasForeignKey("Database.Entities.User", "PlayerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.UserSettings", b =>
                {
                    b.HasOne("Database.Entities.User", null)
                        .WithOne("Settings")
                        .HasForeignKey("Database.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoinBeatmapCreators", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", null)
                        .WithMany()
                        .HasForeignKey("CreatedBeatmapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("CreatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoinPooledBeatmaps", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", null)
                        .WithMany()
                        .HasForeignKey("PooledBeatmapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsPooledInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entities.Beatmap", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Games");
                });

            modelBuilder.Entity("Database.Entities.Beatmapset", b =>
                {
                    b.Navigation("Beatmaps");
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("Audits");

                    b.Navigation("Scores");

                    b.Navigation("WinRecord");
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("Audits");

                    b.Navigation("Games");

                    b.Navigation("PlayerMatchStats");

                    b.Navigation("PlayerRatingAdjustments");

                    b.Navigation("WinRecord");
                });

            modelBuilder.Entity("Database.Entities.OAuthClient", b =>
                {
                    b.Navigation("AdminNotes");
                });

            modelBuilder.Entity("Database.Entities.Player", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("CreatedBeatmapsets");

                    b.Navigation("HighestRanks");

                    b.Navigation("MatchStats");

                    b.Navigation("RatingAdjustments");

                    b.Navigation("Ratings");

                    b.Navigation("RulesetData");

                    b.Navigation("Scores");

                    b.Navigation("TournamentStats");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.Navigation("Adjustments");
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("Audits");

                    b.Navigation("Matches");

                    b.Navigation("PlayerTournamentStats");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("GameAdminNotes");

                    b.Navigation("GameScoreAdminNotes");

                    b.Navigation("MatchAdminNotes");

                    b.Navigation("PlayerAdminNotes");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("SubmittedMatches");

                    b.Navigation("SubmittedTournaments");

                    b.Navigation("TournamentAdminNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
